package net.shadew.test;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Handle;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Type;

import java.lang.invoke.*;

import static org.objectweb.asm.Opcodes.*;

/*
 * This code demonstrates the custom use of a boostrap method and the INVOKEDYNAMIC bytecode instruction.
 *
 * It generates the following class
 * public final synthetic class GeneratedClass {
 *     public static synthetic int invoke() {
 *         // Do the INVOKEDYNAMIC magic to achieve the following
 *         return HelloWorldGenerator.message();
 *     }
 * }
 *
 * And then it calls GeneratedClass.invoke() to obtain the string "Hello world!"
 */
public class HelloWorldGenerator {
    public static String message() {
        return "Hello world!";
    }

    public static String messageFurry() {
        return "Henlo world UwU~";
    }

    public static void main(String[] args) throws Throwable {
        // System.out.println(message()); but it's overly complicated
        // I should add this to HelloWorld50x haha

        // Generate class bytecode
        ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_MAXS);
        // package net.shadew.test;
        // public final synthetic class GeneratedClass /* extends Object */ {
        writer.visit(
            59,
            ACC_PUBLIC | ACC_FINAL | ACC_SYNTHETIC, "net/shadew/test/GeneratedClass",
            /* signature */   null,
            /* extends*/      "java/lang/Object",
            /* implements */  null
        );

        // public static int invoke() {
        MethodVisitor mv = writer.visitMethod(
            ACC_PUBLIC | ACC_STATIC,
            "invoke", "()Ljava/lang/String;",
            /* signature */  null,
            /* exceptions */ null
        );

        MethodType bootstrapType = MethodType.methodType(CallSite.class, MethodHandles.Lookup.class, String.class, MethodType.class, int.class);

        mv.visitCode();
        // INVOKEDYNAMIC    (this is where the magic happens)
        //     what ()Ljava/lang/String;
        //     BootstrapMethodTest.bootstrap(MethodHandles.Lookup, String, MethodType) -> CallSite
        mv.visitInvokeDynamicInsn(
            "what", "()Ljava/lang/String;",
            // The name 'what' is completely unused, the descriptor return type only defines what ends up on the stack
            new Handle(H_INVOKESTATIC, Type.getInternalName(HelloWorldGenerator.class), "bootstrap", bootstrapType.descriptorString(), false),
            // Argument to the bootstrap function
            args.length > 0 && args[0].equals("furry")
        );
        // IRETURN
        mv.visitInsn(ARETURN);
        // MAXS (done by COMPUTE_MAXS)
        mv.visitMaxs(-1, -1);

        // }
        mv.visitEnd();

        // }
        writer.visitEnd();

        // Write bytecode
        byte[] bytecode = writer.toByteArray();

        // Define a class from the generated bytecode
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        Class<?> cls = lookup.defineClass(bytecode);

        // Find the 'invoke' method we generated
        MethodHandle invoke = lookup.findStatic(cls, "invoke", MethodType.methodType(String.class));

        // System.out.println(GeneratedClass.invoke())
        // 'invoke' will refer to the bootstrap method below, via INVOKEDYNAMIC
        // The bootstrap method will construct a call site that will point to 'message'
        // This essentially does System.out.println(message());
        System.out.println(invoke.invoke());
    }

    // Bootstrap method
    // This method is called by the JVM when it encounters our INVOKEDYNAMIC instruction.
    // Here we tell the JVM what this INVOKEDYNAMIC instruction is actually supposed to do, which is in our case
    // to just call 'message'. If the JVM gets to that particular INVOKEDYNAMIC instruction again, it won't call
    // this method again as it already linked it to a call site.
    public static CallSite bootstrap(MethodHandles.Lookup lookup, String name, MethodType type, int furry) throws Exception {
        MethodType dynType = MethodType.methodType(String.class);
        return new ConstantCallSite(lookup.findStatic(HelloWorldGenerator.class, "message" + (furry != 0 ? "Furry" : ""), dynType));
    }
}
